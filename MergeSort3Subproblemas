
# Algoritmo Merge Sort con 2 subproblemas
# Recibe un array y devuelve el array ordenado

#La cota superior es 6nlog_2(n)+6n -> O(nlogn)

def mergeSort2(arr):
    if len(arr) > 1:
        # elemento central
        mid = len(arr) // 2
        # Parte izquierda del array
        L = arr[:mid]
       #  Parte derecha del array
        R = arr[mid:]
        # Ordenamos parte izquierda
        mergeSort2(L)
        # Ordenamos parte derecha
        mergeSort2(R)

        # i es el indice del array L
        # j es el indice del array R
        # k es el indice del array final arr
        i = j = k = 0

        # Copiamos a arr los elementos de L y R de forma ordenada
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1

        # Si uno de los dos indices ha llegado al final se copian los del otro array
        # Si quedan elementos de L por copiar
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1

        # Si quedan elementos de R por copiar
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1


# Muesetra el array por pantalla
def printList(arr):
    for i in range(len(arr)):
        print(arr[i], end=" ")
    print()


# Programa principal
if __name__ == '__main__':
    arr = [38, 27, 43, 3, 9, 82, 10]
    print("El array  de merge2 es", end="\n")
    printList(arr)
    mergeSort2(arr)
    print("Y ordenado: ", end="\n")
    printList(arr)


# Merge Sort con 3 subproblemas

def mergeSort(arr):
    if len(arr) == 2:
        mergeSort2(arr)
    if len(arr) > 2:
        # elemento central
        frac = len(arr) // 3
        # Parte izquierda del array
        L = arr[:frac]
       #  Parte derecha del array
        R = arr[frac:len(arr)-frac]
       # Parte central del array
        M = arr[len(arr)-frac:]
        # Ordenamos parte izquierda
        mergeSort(L)
        # Ordenamos parte derecha
        mergeSort(R)
        # Ordenamos la parte central
        mergeSort(M)

        # i es el indice del array L
        # j es el indice del array R
        # m es el Ã­ndice del array M
        # k es el indice del array final arr
        i = j = m = k = 0

        # Copiamos a arr los elementos de L y R de forma ordenada
        while i < len(L) and j < len(R) and m < len(M):
            if L[i] < R[j] and L[i] < M[m]:
                arr[k] = L[i]
                i += 1
            elif R[j] < L[i] and R[j] < M[m]:
                arr[k] = R[j]
                j += 1
            elif M[m] < L[i] and M[m] < R[j]:
                arr[k] = M[m]
                m += 1
            k += 1

        # Si uno de los dos indices ha llegado al final se copian los del otro array
        # Si quedan elementos de L por copiar

        while m < len(M) and j < len(R):
            if M[m] < R[j]:
                arr[k] = M[m]
                m += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1

        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1

        while i < len(L) and m < len(M):
            if L[i] < M[m]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = M[m]
                m += 1
            k += 1

        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1

        # Si quedan elementos de R por copiar
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1

    # Si quedan elementos de M por copiar
        while m < len(M):
            arr[k] = M[m]
            m += 1
            k += 1


# Muesetra el array por pantalla
def printList(arr):
    for i in range(len(arr)):
        print(arr[i], end=" ")
    print()


# Programa principal
if __name__ == '__main__':
    arr = [38, 27, 43, 3, 9, 82, 10]
    print("El array de merge3 es", end="\n")
    printList(arr)
    mergeSort(arr)
    print("Y ordenado: ", end="\n")
    printList(arr)